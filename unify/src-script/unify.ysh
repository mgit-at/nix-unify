#!/usr/bin/env ysh

if test -e /etc/NIXOS {
  echo "nix-unify is meant to be used on a host operating system that is not nixos" >&2
  echo "It was detected that this machine is running NixOS, aborting." >&2
  exit 2
}

### Deploy script

module main || return 0         # declaration, "include guard"

const self = '@self@'
const toplevel = '@toplevel@'
const state = '/var/nix-unify'
const tmpState = '/run/nix-unify'

const etc = '@etc@'
const sw = '@path@'

export PATH='@PATH@'
var cfg

@srcblock@

proc rm-link(src, target) {
  rm -f "$target"
  ln -sf "$src" "$target"
}

proc hook_systemd( ; ; ctx, cfg) {
  true
}

proc hook_files( ; ; ctx, cfg) {
  var oldunits="$(mktemp -d)"
  if test -e /etc/systemd/system-generators/nix-unify-generator {
    /etc/systemd/system-generators/nix-unify-generator "$oldunits" >/dev/null
  }

  # setvar ctx.links.etc["systemd/system-generators/nix-unify-generator"] = { enable: true, target: "$self" }
  rm-link "$toplevel/bin/switch-to-configuration" "/etc/systemd/system-generators/nix-unify-generator"

  realise-target-links (ctx.links)

  var newunits="$(mktemp -d)"
  /etc/systemd/system-generators/nix-unify-generator "$newunits" >/dev/null

  # dont run this to avoid races - during boot systemd will start everything as needed anyways
  if (not ctx.is_boot) {
    # will run systemctl daemon-reload
    env toplevel="$toplevel" oldunits="$oldunits" newunits="$newunits" "$self/reload-units.pl" switch
  }

  rm -rf "$oldunits" "$newunits"
}

proc final( ; ; ctx, cfg) {
  true
}

proc main(cmd ; cfg) {
  if (cmd === "at_boot") {
    rm-link "$toplevel" /run/booted-system
  }
  if ! test --file /run/booted-system {
    rm-link "$toplevel" /run/booted-system
  }

  rm-link "$toplevel" /run/current-system

  var ctx = { links: cfg.files, is_boot: cmd === "at_boot" }

  @handlerblock@
}

proc systemd-generator (normalDir, earlyDir, lateDir ; cfg) {
  var ctx = { normalDir: normalDir, earlyDir: earlyDir, lateDir: lateDir }

  @generatorblock@
}

if is-main {
  cat "$toplevel/unify.json" | json read (&cfg)
  mkdir -p "$state"
  mkdir -p "$tmpState"

  if (len(ARGV) >= 2 and "$1" === "debug-generator") {
    dir="$(mktemp -d)"
    systemd-generator "$dir/normal" "$dir/early" "$dir/late" (cfg)
    find "$dir"
  } elif ("$(basename "$0")" === "nix-unify-generator") {
    if (len(ARGV) >= 3) {
      systemd-generator @ARGV (cfg)
    } else {
      systemd-generator "$1" "$1" "$1" (cfg)
    }
  } else {
    main @ARGV (cfg)
  }
}
