module shareSystemd || return

proc describe(; ; cfg) {
  d_t "share systemd"
  d_e (cfg)
  var unitsShared = split("$(cat "$state/unitsShared")")
  d_l "units shared" (unitsShared)
}

# TODO: use systemd generator and place the files as symlinks into the generator dir

proc hook_files(; ; ctx, cfg) {
  if (cfg.enable) {
    # TODO: fix /nix/store being missing in restricted units

    setvar ctx.systemdLink = []
    echo "" > "$tmpState/unitsShared"
    for unit in (cfg.unitsResolved) {
      var frag=$(systemctl show "$unit" -p FragmentPath --value)
      if (frag === "") {
        # doesn't exist
        call ctx.systemdLink->append (unit)
      } elif ("$(readlink -f "$frag")" ~~ '/nix/*') {
        # is already installed nix unit
        call ctx.systemdLink->append (unit)
      } elif (arrayContains(cfg.replace, unit)) {
        # should be replaced
        systemctl stop "$unit" || true
        systemctl disable "$unit"
        call ctx.systemdLink->append (unit)
      }
    }
    for unit in (ctx.systemdLink) {
      echo "$unit" >> "$tmpState/unitsShared"
      maybe-link "systemd/system/$unit" (ctx)
      maybe-link "systemd/system/$unit.d" (ctx)
    }
    mv "$tmpState/unitsShared" "$state/unitsShared"
  }
}

proc final(; ; ctx, cfg) {
  if (cfg.enable) {
    systemctl daemon-reload
    for unit in (ctx.systemdLink) {
      systemctl enable "$unit"
    }
    # todo: restart/reload as necessary (see switch-to-configuration.pl)
  }
}
