const fileDB = "$state/fileDB"
const newFileDB = "$tmpState/fileDB"

proc update-link(source, target) {
  if test -L "$target" {
    # file exists and is a link
    echo "update link: $target"
    if readlink "$source" != "$target" {
      # update if necesasry
      rm-link "$source" "$target"
    }
  } elif test -e "$target" {
    die "trying to create link at $target, but is a user-managed file"
  } else {
    echo "create link: $target"
    # create
    mkdir -p "$(dirname "$target")"
    rm-link "$source" "$target"
  }
}

# returns all elements of arraya that are not in arrayb
# (a=old, b=new)
func arrayFindNonShared(arraya, arrayb, nonshared) {
  var contains
  for item in (arraya) {
    setvar contains = (0 === 1)
    for itemcomp in (arrayb) {
      if (itemcomp === item) {
        setvar contains = true
      }
    }
    var v = "$(echo "$contains")"
    # if (not contains) {
    if test "$v" = "false" {
      # append "$item" (nonshared)
      var v2 = "$(echo "$item")"
      append "$v2" (nonshared)
    }
  }
}

func arrayContains(array, item) {
  for comp in (array) {
    if (comp === item) {
      return (true)
    }
  }

  return (false)
}

# target links: { etc = { source(rel etc) = dest(rel etc); }; sw = { source(rel sw) = dest; } }
# db: long array of links

proc realise-link(source, target) {
  update-link "$source" "$target" # TODO: graceful error handling
  echo "$target" >> "$newFileDB"
}

proc prune-old {
  touch "$fileDB"

  var newDB = split("$(cat "$newFileDB")")
  var oldDB = split("$(cat "$fileDB")")

  var remove = []
  call arrayFindNonShared(oldDB, newDB, remove)
  for link in (remove) {
    echo "rm old link: $link"
    rm -f "$link"
  }
  mv "$newFileDB" "$fileDB"
}

proc realise-target-links(; target) {
  rm-link "$etc" /etc/static

  # we are linking to links here, so we can update all of
  # the existing at once instead of recreating them each time

  # TODO: merge flag that merges files. will also require "mergeStrategy" (hash-seperator, other comment types, etc)

  for i, k, v in (target.etc) {
    if (v.enable) {
      realise-link "/etc/static/$k" "/etc/$[v.target]"
    }
  }

  for i, k, v in (target.sw) {
    if (v.enable) {
      realise-link "/run/current-system/sw/$k" "/$[v.target]"
    }
  }

  prune-old
}

proc maybe-link(path ; ctx ) {
  if test -e "$etc/$path" {
    setvar ctx.links.etc["$path"] = { enable: true, target: path }
  }
}
